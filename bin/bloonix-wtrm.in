#!@@PERL@@

=head1 NAME

bloonix-wtrm - Web transaction server.

=head1 SYNOPSIS

    bloonix-wtrm

=head1 REPORTING BUGS

Please report all bugs to <support(at)bloonix.de>.

=head1 AUTHOR

Jonny Schulz <support(at)bloonix.de>.

=head1 POWERED BY

     _    __ _____ _____ __  __ __ __   __
    | |__|  |     |     |  \|  |__|\  \/  /
    |  . |  |  |  |  |  |      |  | >    <
    |____|__|_____|_____|__|\__|__|/__/\__\

=head1 COPYRIGHT

Copyright (C) 20012-2014 by Jonny Schulz. All rights reserved.

=cut

use strict;
use warnings;
use Digest::SHA qw();
use Getopt::Long qw(:config no_ignore_case);
use Log::Handler;
use Params::Validate qw();
use Time::HiRes qw();
use JSON;

use Bloonix::Config;
use Bloonix::HangUp;
use Bloonix::IO::SIPC;
use Bloonix::ProcManager;

use base qw(Bloonix::Accessor);
__PACKAGE__->mk_accessors(qw/log json io proc req client config/);
__PACKAGE__->run();

our $VERSION = "0.2";

sub run {
    my $class = shift;
    my $self = bless {}, $class;

    $self->init;
    $self->io( Bloonix::IO::SIPC->new($self->config->{"tcp_server"}) );
    $self->proc( Bloonix::ProcManager->new($self->config->{"proc_manager"}) );

    while (!$self->proc->done) {
        my $time = Time::HiRes::gettimeofday();
        $self->proc->set_status_waiting;
        my $client = $self->io->accept or next;
        $self->log->set_pattern("%X", "X", $client->sock->peeraddr);
        $self->log->notice("request started (${time}s)");
        $self->process($client);
        $time = sprintf("%.3f", Time::HiRes::gettimeofday() - $time);
        $self->log->notice("request finished (${time}s)");
    }
}

sub init {
    my $self = shift;

    $self->get_argv;
    $self->get_config;
    $self->hang_up;
    $self->init_logger;
    $self->json( JSON->new );
}

sub get_argv {
    my $self = shift;
    my $config = "@@CONFDIR@@/bloonix/wtrm/main.conf";
    my $pidfile = "@@RUNDIR@@/bloonix/bloonix-wtrm.pid";
    my $version = undef;
    my $help = undef;

    GetOptions(
        "c|config-file=s" => \$config,
        "p|pid-file=s" => \$pidfile,
        "h|help" => \$help,
        "v|version" => \$version,
    ) or exit 1;

    if ($help) {
        print "Usage: bloonix-wtrm [ options ]\n";
        print "-c, --config-file <config>\n";
        print "    The configuration file.\n";
        print "    Default: @@CONFDIR@@/bloonix/wtrm/main.conf\n";
        print "-p, --pid-file <file>\n";
        print "    Where to store the daemon pid.\n";
        print "    Default: @@RUNDIR@@/bloonix/bloonix-wtrm.pid\n";
        print "-v, --version\n";
        print "    Print the version number.\n";
        print "-h, --help\n";
        print "    Print the help.\n";
        exit 0;
    }

    if ($version) {
        print "Bloonix wtrm v$VERSION\n";
        exit 0;
    }

    if ($config) {
        $self->{config_file} = $config;
    }

    if ($pidfile) {
        $self->{pid_file} = $pidfile;
    }
}

sub init_logger {
    my $self = shift;

    $self->log( Log::Handler->create_logger("bloonix") );
    $self->log->set_pattern("%X", "X", "n/a");
    $self->log->config(config => $self->config->{logger});
    $SIG{__DIE__} = sub { $self->log->trace(fatal => @_) };
    $SIG{__WARN__} = sub { $self->log->warning(@_) };
}

sub get_config {
    my $self = shift;

    my $config = Bloonix::Config->parse($self->{config_file});

    $self->config(
        $self->validate($config)
    );
}

sub hang_up {
    my $self = shift;

    Bloonix::HangUp->now(
        user => $self->config->{user},
        group => $self->config->{group},
        pid_file => $self->{pid_file}
    );
}

sub process {
    my ($self, $client) = @_;

    $self->client($client);
    $self->req(scalar $client->recv);

    if (!$self->check_request) {
        return $self->client->send(
            status => "err",
            message => "unauthorized access"
        );
    }

    if ($self->req->{action} !~ /^(ping|test|quick|result)\z/) {
        return $self->client->send(
            status => "err",
            message => "the requested site does not exists"
        );
    }

    $self->log->notice("process action", $self->req->{action});

    if ($self->req->{action} eq "ping") {
        $self->pong;
    } elsif ($self->req->{action} eq "test") {
        $self->test;
    } elsif ($self->req->{action} eq "quick") {
        $self->test(1);
    } elsif ($self->req->{action} eq "result") {
        $self->result;
    }
}

sub check_request {
    my $self = shift;

    if (ref $self->req ne "HASH") {
        return undef;
    }

    if (!$self->req->{action}) {
        return undef;
    }

    if ($self->req->{action} eq "ping") {
        return 1;
    }

    if (!$self->req->{wtrm_api_key} || !$self->config->{wtrm_api_key}) {
        return undef;
    }

    if ($self->req->{wtrm_api_key} ne $self->config->{wtrm_api_key}) {
        return undef;
    }

    return 1;
}

sub pong {
    my $self = shift;

    $self->client->send(status => "ok", message => "pong");
}

sub test {
    my ($self, $quick) = @_;
    my ($phantomjs, $bloonix_wtrm_js) = $self->find_phantomjs;

    if (!$phantomjs) {
        return $self->client->send(status => "err", message => "command 'phantomjs' not found");
    }

    if (!$bloonix_wtrm_js) {
        return $self->client->send(status => "err", message => "javascript file 'bloonix-wtrm.js' not found");
    }

    my $key = Digest::SHA::sha256_hex(Time::HiRes::gettimeofday() . $$ . int(rand(1000000)));
    my $config_json = "/tmp/bloonix-wtrm-config-$key.json";
    my $output_json = "/tmp/bloonix-wtrm-output-$key.json";

    $self->log->notice("execute wtrm workflow");
    $self->log->dump(notice => $self->req);

    open my $fh, ">", $config_json
        or die "unable to open file '$config_json' - $!";
    print $fh $self->json->utf8->encode($self->req->{data});
    close $fh;

    my $command = "$phantomjs --ssl-protocol=tlsv1 --ignore-ssl-errors=yes $bloonix_wtrm_js file=$config_json";

    if ($quick) {
        $command .= " noimg=yes";
    }

    system("$command 1>$output_json 2>&1 &");
    $self->client->send(status => "ok", data => $key);
}

sub find_phantomjs {
    my ($phantomjs, $bloonix_wtrm_js);

    if (-e "/usr/local/lib/bloonix/bin/phantomjs") {
        $phantomjs = "/usr/local/lib/bloonix/bin/phantomjs";
    } elsif (-e "/usr/lib/bloonix/bin/phantomjs") {
        $phantomjs = "/usr/lib/bloonix/bin/phantomjs";
    } else {
        $phantomjs = qx{which phantomjs};
        chomp $phantomjs;
    }

    if (-e "/usr/local/lib/bloonix/js/bloonix-wtrm.js") {
        $bloonix_wtrm_js = "/usr/local/lib/bloonix/js/bloonix-wtrm.js";
    } elsif (-e "/usr/lib/bloonix/js/bloonix-wtrm.js") {
        $bloonix_wtrm_js = "/usr/lib/bloonix/js/bloonix-wtrm.js";
    }

    return ($phantomjs, $bloonix_wtrm_js);
}

sub result {
    my $self = shift;
    my $opts = $self->req;
    my $timeout = time + 10;
    my @data;

    while (time < $timeout) {
        if (open my $fh, "<", "/tmp/bloonix-wtrm-output-$opts->{key}.json") {
            my $i = 1;
            while (my $row = <$fh>) {
                if ($i >= $opts->{num}) {
                    push @data, $row;
                }
                $i++;
            }
            close $fh;
            last if @data;
        }

        Time::HiRes::usleep 200_000;
    }

    eval {
        chomp @data;
        foreach my $row (@data) {
            $row = $self->json->decode($row);
            if ($row->{status} && $row->{status} eq "done") {
                unlink "/tmp/bloonix-wtrm-config-$opts->{key}.json";
                unlink "/tmp/bloonix-wtrm-output-$opts->{key}.json";
            }
        }
    };

    if ($@) {
        $self->log->error($@);
        $self->log->dump(error => \@data);
    }

    $self->client->send(status => "ok", data => \@data);
}

sub validate {
    my $self = shift;

    my %opts = Params::Validate::validate(@_, {
        wtrm_api_key => {
            type => Params::Validate::SCALAR,
            regex => qr/^.{32,}\z/
        },
        proc_manager => {
            type => Params::Validate::HASHREF
        },
        tcp_server => {
            type => Params::Validate::HASHREF
        },
        user => {
            type => Params::Validate::SCALAR,
            default => "bloonix"
        },
        group => {
            type => Params::Validate::SCALAR,
            default => "bloonix"
        },
        logger => {
            type => Params::Validate::HASHREF,
            optional => 1
        }
    });

    $opts{tcp_server} = $self->validate_tcp_server($opts{tcp_server});

    if (!$opts{proc_manager}{lockfile}) {
        $opts{proc_manager}{lockfile} = "/var/lib/bloonix/ipc/wtrm.%P.lock";
    }

    return \%opts;
}

sub validate_tcp_server {
    my $class = shift;

    my %opts = Params::Validate::validate(@_, {
        host => {
            type => Params::Validate::SCALAR,
            optional => 1
        },
        port => {
            type => Params::Validate::SCALAR,
            default => 5470
        },
        use_ssl => {
            type => Params::Validate::SCALAR,
            default => 1
        },
        ssl_key_file => {
            type => Params::Validate::SCALAR,
            default => "/etc/bloonix/wtrm/pki/server.key"
        },
        ssl_cert_file => {
            type => Params::Validate::SCALAR,
            default => "/etc/bloonix/wtrm/pki/server.cert"
        },
        mode => {
            type => Params::Validate::SCALAR,
            default => "failover"
        }
    });

    if ($opts{host}) {
        $opts{localaddr} = delete $opts{host};
    }

    $opts{localport} = delete $opts{port};
    $opts{auto_connect} = 1;
    $opts{listen} = 1;

    return \%opts;
}
